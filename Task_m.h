//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Task.msg.
//

#ifndef __TASK_M_H
#define __TASK_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Task;
// cplusplus {{
#include <vector>
#include <string>
typedef std::vector<std::string> StringVector;
// }}

/**
 * Class generated from <tt>Task.msg:15</tt> by opp_msgtool.
 * <pre>
 * //
 * // Task message definition for queueing framework
 * //
 * packet Task
 * {
 *     simtime_t creationTime;
 *     simtime_t totalWaitingTime; 	    // total time spent on waiting in queues
 *     simtime_t totalProcessingTime;      // total time spent in processing
 *     simtime_t totalPropagationTime;     // total time spent in propagation
 *     simtime_t deadline;				 // task need to be finisehd before this
 *     double taskSize = 0;
 *     double cpuCycles = 1000000000;
 *     double processedCycles = 0;
 *     int arrivingServer;
 *     int runningServer;
 *     StringVector hopPath;
 * }
 * </pre>
 */
class Task : public ::omnetpp::cPacket
{
  protected:
    omnetpp::simtime_t creationTime = SIMTIME_ZERO;
    omnetpp::simtime_t totalWaitingTime = SIMTIME_ZERO;
    omnetpp::simtime_t totalProcessingTime = SIMTIME_ZERO;
    omnetpp::simtime_t totalPropagationTime = SIMTIME_ZERO;
    omnetpp::simtime_t deadline = SIMTIME_ZERO;
    double taskSize = 0;
    double cpuCycles = 1000000000;
    double processedCycles = 0;
    int arrivingServer = 0;
    int runningServer = 0;
    StringVector hopPath;

  private:
    void copy(const Task& other);

  protected:
    bool operator==(const Task&) = delete;

  public:
    Task(const char *name=nullptr, short kind=0);
    Task(const Task& other);
    virtual ~Task();
    Task& operator=(const Task& other);
    virtual Task *dup() const override {return new Task(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual omnetpp::simtime_t getCreationTime() const;
    virtual void setCreationTime(omnetpp::simtime_t creationTime);

    virtual omnetpp::simtime_t getTotalWaitingTime() const;
    virtual void setTotalWaitingTime(omnetpp::simtime_t totalWaitingTime);

    virtual omnetpp::simtime_t getTotalProcessingTime() const;
    virtual void setTotalProcessingTime(omnetpp::simtime_t totalProcessingTime);

    virtual omnetpp::simtime_t getTotalPropagationTime() const;
    virtual void setTotalPropagationTime(omnetpp::simtime_t totalPropagationTime);

    virtual omnetpp::simtime_t getDeadline() const;
    virtual void setDeadline(omnetpp::simtime_t deadline);

    virtual double getTaskSize() const;
    virtual void setTaskSize(double taskSize);

    virtual double getCpuCycles() const;
    virtual void setCpuCycles(double cpuCycles);

    virtual double getProcessedCycles() const;
    virtual void setProcessedCycles(double processedCycles);

    virtual int getArrivingServer() const;
    virtual void setArrivingServer(int arrivingServer);

    virtual int getRunningServer() const;
    virtual void setRunningServer(int runningServer);

    virtual const StringVector& getHopPath() const;
    virtual StringVector& getHopPathForUpdate() { return const_cast<StringVector&>(const_cast<Task*>(this)->getHopPath());}
    virtual void setHopPath(const StringVector& hopPath);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Task& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Task& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const StringVector *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline StringVector *fromAnyPtr(any_ptr ptr) { return ptr.get<StringVector>(); }
template<> inline Task *fromAnyPtr(any_ptr ptr) { return check_and_cast<Task*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __TASK_M_H

